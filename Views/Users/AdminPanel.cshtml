@model ApplicationDevelopmentCourseProject.Controllers.UsersController.AdminViewModel

<style>
    .center {
        text-align: center;
    }
</style>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Admin Panel</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="#users" onclick="showhide('usersTable');">Users <span class="sr-only">(current)</span></a>
            </li>
            <li><a class="nav-link" href="#branches" onclick="showhide('branchesTable');">Branches</a></li>
            <li><a class="nav-link" href="#products" onclick="showhide('productsTable');">Products</a></li>
            <li><a class="nav-link" href="#categories" onclick="showhide('categoriesTable');">Categories</a></li>
            <li><a class="nav-link" href="#orders" onclick="showhide('ordersTable');">Orders</a></li>
            <li><a class="nav-link" href="#statistics" onclick="showhide('statistics');">Statistics</a></li>
            <li><a class="nav-link" href="#contactUs" onclick="showhide('contactUsMessagesTable');">Customer messages</a></li>

        </ul>
        <form class="form-inline my-2 my-lg-0">
            <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </form>
    </div>
</nav>

<body>
    <div id="branchestable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.BranchName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.Address)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.XCoordinate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BranchModel.YCoordinate)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Branches)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.BranchName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Address)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.XCoordinate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.YCoordinate)
                        </td>
                        <td>
                            <a asp-controller="Branches" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-controller="Branches" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Branches" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Create", "Branches")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Create new branch" />
    </div>
    <div id="contactUsMessagesTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Telephone)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Message)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ContactModel.Email)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Contacts)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Telephone)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Message)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            <a asp-controller="Contacts" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Contacts" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="categoriesTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryModel.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryModel.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryModel.Description)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Categories)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Create", "Categories")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Create new category" />
    </div>

    <div id="usersTable">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Email)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Username)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Password)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.Type)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.UserModel.MemberSince)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Users)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Username)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Password)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Type)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MemberSince)
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("Register", "Users")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Register new user" />
    </div>
    <div id="productsTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ProductModel.Description)
                    </th>
                    @*<th>
                            @Html.DisplayNameFor(model => model.ProductModel.Category)
                        </th>*@
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Products)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        @*<td>
                                @Html.DisplayFor(modelItem => item.Category)
                            </td>*@
                        <td>
                            <a asp-controller="Products" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-controller="Products" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Products" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <input type="button" onclick="location.href='@Url.Action("UploadProduct", "Products")';return false;" class="btn btn-lg btn-default btn-block btn-primary" value="Upload new product" />
    </div>



    <div id="ordersTable" style="display: none;">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.OrderTotal)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.OrderPlaced)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderModel.Products)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Orders)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderTotal)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderPlaced)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Products)
                        </td>
                        <td>
                            <a asp-controller="Orders" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-controller="Orders" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-controller="Orders" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="statistics" style="display: none;" class="center">
        <!-- Create a div where the graph will take place -->
        <div id="my_dataviz"></div>
        <!-- Add 2 buttons -->
        <button onclick="update(data1)">Data 1</button>
        <button onclick="update(data2)">Data 2</button>
    </div>
    <div id="statistics" style="display: none;" class="center">
        <!-- Create a div where the graph will take place -->
        <div id="my_dataviz"></div>
        <!-- Add 2 buttons -->
        <button onclick="update(data1)">Data 1</button>
        <button onclick="update(data2)">Data 2</button>
    </div>
</body>



@section Scripts {
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>


    <script type="text/javascript">

        var divState = {}; // we store the status in this object
        function showhide(id) {
            if (document.getElementById) {
                var divid = document.getElementById(id);

                divState[id] = (divState[id]) ? false : true; // initialize / invert status (true is visible and false is closed)
                //close others
                for (var div in divState) {
                    if (divState[div] && div != id) { // ignore closed ones and the current
                        document.getElementById(div).style.display = 'none'; // hide
                        divState[div] = false; // reset status
                    }
                }
                divid.style.display = (divid.style.display == 'block' ? 'none' : 'block');
            }
        }
        showhide("usersTable");
    </script>
    <script>
        // set the dimensions and margins of the graph
        var width = 450
        height = 450
        margin = 40

        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        // create 2 data_set
        var data1 = { a: 9, b: 20, c: 30, d: 8, e: 12 }
        var data2 = { a: 6, b: 16, c: 20, d: 14, e: 19, f: 12 }

        // set the color scale
        var color = d3.scaleOrdinal()
            .domain(["a", "b", "c", "d", "e", "f"])
            .range(d3.schemeDark2);

        // A function that create / update the plot for a given variable:
        function update(data) {

            // Compute the position of each group on the pie:
            var pie = d3.pie()
                .value(function (d) { return d.value; })
                .sort(function (a, b) { console.log(a); return d3.ascending(a.key, b.key); }) // This make sure that group order remains the same in the pie chart
            var data_ready = pie(d3.entries(data))

            // map to data
            var u = svg.selectAll("path")
                .data(data_ready)

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            u
                .enter()
                .append('path')
                .merge(u)
                .transition()
                .duration(1000)
                .attr('d', d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius)
                )
                .attr('fill', function (d) { return (color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-width", "2px")
                .style("opacity", 1)

            // remove the group that is not present anymore
            u
                .exit()
                .remove()

        }

        // Initialize the plot with the first dataset
        update(data1)

    </script>
    <script>
        // set the dimensions and margins of the graph
        var width = 450
        height = 450
        margin = 40

        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        // create 2 data_set
        var data1 = { a: 9, b: 20, c: 30, d: 8, e: 12 }
        var data2 = { a: 6, b: 16, c: 20, d: 14, e: 19, f: 12 }

        // set the color scale
        var color = d3.scaleOrdinal()
            .domain(["a", "b", "c", "d", "e", "f"])
            .range(d3.schemeDark2);

        // A function that create / update the plot for a given variable:
        function update(data) {

            // Compute the position of each group on the pie:
            var pie = d3.pie()
                .value(function (d) { return d.value; })
                .sort(function (a, b) { console.log(a); return d3.ascending(a.key, b.key); }) // This make sure that group order remains the same in the pie chart
            var data_ready = pie(d3.entries(data))

            // map to data
            var u = svg.selectAll("path")
                .data(data_ready)

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            u
                .enter()
                .append('path')
                .merge(u)
                .transition()
                .duration(1000)
                .attr('d', d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius)
                )
                .attr('fill', function (d) { return (color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-width", "2px")
                .style("opacity", 1)

            // remove the group that is not present anymore
            u
                .exit()
                .remove()

        }

        // Initialize the plot with the first dataset
        update(data1)

    </script>
}
